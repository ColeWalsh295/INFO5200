library(tidyverse, quietly = T)
# load info5200.2.assisstments.rds, use the readRDS() function.
asm = readRDS("info5200.2.assisstments.rds")
library(tidyverse, quietly = T)
# load info5200.2.assisstments.rds, use the readRDS() function.
asm = readRDS("info5200.2.assisstments.rds")
asm_outcomes = asm %>%
group_by(studentID) %>%
summarize(num_quiz = n(),
quiz300 = num_quiz >= 300)
nrow(asm_outcomes)
head(asm_outcomes)
# We first need to go through this tedious process of
#  dealing with the dates to make them sortable
# convert to character string
asm$start_day = as.character(asm$start_day)
# split up e.g. 03-OCT-05
start_day_split = strsplit(asm$start_day, split = "-", fixed = T)
# get the day
asm$start_d = unlist(lapply(start_day_split, first))
# get the year, add 20 in front
asm$start_y = paste0(20, unlist(lapply(start_day_split, last)))
# get/convert month
asm$start_m = match(unlist(lapply(start_day_split, function(x) x[2])), toupper(month.abb))
# convert time to character string
asm$start_time = as.character(asm$start_time)
# concat it all
asm$start_timestamp = paste0(asm$start_y, asm$start_m, asm$start_d, asm$start_time)
# Compute the order in which students answered questions, keep first 100
asm_sub = asm %>%
group_by(studentID) %>%
mutate(i = rank(start_timestamp, ties.method = "random")) %>%
filter(i <= 100)
head(asm_sub)
# Compute the order in which students answered questions, keep first 100
asm_sub = asm %>%
group_by(studentID) %>%
mutate(i = rank(start_timestamp, ties.method = "random")) %>%
filter(i <= 100)
# We first need to go through this tedious process of
#  dealing with the dates to make them sortable
# convert to character string
asm$start_day = as.character(asm$start_day)
# split up e.g. 03-OCT-05
start_day_split = strsplit(asm$start_day, split = "-", fixed = T)
# get the day
asm$start_d = unlist(lapply(start_day_split, first))
# get the year, add 20 in front
asm$start_y = paste0(20, unlist(lapply(start_day_split, last)))
# get/convert month
asm$start_m = match(unlist(lapply(start_day_split, function(x) x[2])), toupper(month.abb))
# convert time to character string
asm$start_time = as.character(asm$start_time)
# concat it all
asm$start_timestamp = paste0(asm$start_y, asm$start_m, asm$start_d, asm$start_time)
# Compute the order in which students answered questions, keep first 100
asm_sub = asm %>%
group_by(studentID) %>%
mutate(i = rank(start_timestamp, ties.method = "random")) %>%
filter(i <= 100)
head(asm_sub)
# Compute the order in which students answered questions, keep first 100
asm_sub = asm %>%
group_by(studentID) %>%
mutate(i = rank(start_timestamp, ties.method = "random")) %>%
filter(i <= 100)
head(asm_sub)
asm_sub %>%
filter(i > 90) %>%
group_by(studentID) %>%
summarize(avg_hints_last10 = mean(hints))
head(asm_sub)
asm_sub %>%
filter((i == 1) | (i == 100)) %>%
group_by(studentID) %>%
summarize(difftime(full_start_time[1], full_start_time[2]))
head(asm_sub)
# Now using the asm_sub dataset we can finally compute features like total time
asm_features_overall = asm_sub %>%
group_by(studentID) %>%
summarise(
total_time = sum(seconds),
avg_hints = mean(hints),
avg_attempts = mean(attempts),
avg_correct = mean(correctonfirstattempt))
asm_features_last10 = asm_sub %>%
filter(i > 90) %>%
group_by(studentID) %>%
summarize(total_time_last10 = sum(seconds),
avg_hints_last10 = mean(hints),
avg_attempts_last10 = mean(attempts),
avg_correct_last10 = mean(correctonfirstattempt))
asm_features_1to100 = asm_sub %>%
filter((i == 1) | (i == 100)) %>%
group_by(studentID) %>%
summarize(difftime(full_start_time[1], full_start_time[2]))
asm_sub %>%
filter((i == 1) | (i == 100)) %>%
group_by(studentID) %>%
summarize(diff(start_d))
asm_features_1to100 = asm_sub %>%
filter((i == 1) | (i == 100)) %>%
group_by(studentID) %>%
summarize(diff(as.matrix(start_d)))
by(asm_sub, asm_sub$studentID, function(x) {x[i = 100, 'start_d'] - x[i = 1, 'start_d']})
by(asm_sub, asm_sub$studentID, function(x) {x[x[, c('i')] = 100, 'start_d'] - x[x[, c('i')] = 1, 'start_d']})
by(asm_sub, asm_sub$studentID, function(x) {x[x[, c('i')] == 100, 'start_d'] - x[x[, c('i')] == 1, 'start_d']})
by(asm_sub, asm_sub$studentID, function(x) {max(x[, c('i')])}
function(x) {x[x[, c('i')] == 100, 'start_d'] - x[x[, c('i')] == 1, 'start_d']})
by(asm_sub, asm_sub$studentID, function(x) {max(x[, c('i')])})
by(asm_sub, asm_sub$studentID, function(x) {x[x[, c('i')] == 100, c('start_d')] - x[x[, c('i')] == 1, c('start_d')]})

library(tidyverse)
library(randomForest)
a = readRDS("info5200.10.rds")
head(a)
summary(a)
n_distinct(a$skill_id)
hist(table(a$user_id))
# Inspecting the correlation
base_vars = c("bored","correct","ms_first_response","hint_count","attempt_count","user_event_index","time_spent")
cor(a[,base_vars])
### INSTRUCTOR EXAMPLE ###
a %>%
group_by(user_id) %>%
mutate(
# Diff in response time to the typical response time
diff = ms_first_response - median(ms_first_response)
) %>%
group_by(
# Group difference into 5 buckets
bucket = cut(diff, c(-Inf,-10000, -1000, -100, 100, 1000, 10000, Inf))
) %>%
summarise(
# get the average prevalence of boredom in each bucket
boredom = mean(bored)
) %>%
ggplot(aes(x=bucket, y=boredom)) + geom_point() # plot it
a = a %>%
group_by(user_id) %>% # median will be relative to student
mutate(
rel_resp_time = ms_first_response - median(ms_first_response),
slow_response = as.integer(rel_resp_time < -1000),
fast_response = as.integer(rel_resp_time > 10000)
) %>%
ungroup
# Checking correlations
cor(a[,c("bored","rel_resp_time","slow_response","fast_response")])
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
# Add your own exploration and feature engineering here (make at least 7 new features)
#######################################
#######################################
# Checking correlations
cor(a[,c("bored","rel_resp_time","slow_response","fast_response")])
a = readRDS("info5200.10.rds")
# Inspecting the correlation
base_vars = c("bored","correct","ms_first_response","hint_count","attempt_count","user_event_index","time_spent")
cor(a[,base_vars])
### INSTRUCTOR EXAMPLE ###
a %>%
group_by(user_id) %>%
mutate(
# Diff in response time to the typical response time
diff = ms_first_response - median(ms_first_response)
) %>%
group_by(
# Group difference into 5 buckets
bucket = cut(diff, c(-Inf,-10000, -1000, -100, 100, 1000, 10000, Inf))
) %>%
summarise(
# get the average prevalence of boredom in each bucket
boredom = mean(bored)
) %>%
ggplot(aes(x=bucket, y=boredom)) + geom_point() # plot it
a = a %>%
group_by(user_id) %>% # median will be relative to student
mutate(
rel_resp_time = ms_first_response - median(ms_first_response),
slow_response = as.integer(rel_resp_time < -1000),
fast_response = as.integer(rel_resp_time > 10000)
) %>%
ungroup
# Checking correlations
cor(a[,c("bored","rel_resp_time","slow_response","fast_response")])
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
# Add your own exploration and feature engineering here (make at least 7 new features)
#######################################
#######################################
length(unique(a$user_id))
users = sample(unique(a$user_id), 100)
users
train = a[a$user_id %in% users,]
head(train)
train
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
users = sample(unique(a$user_id), 150)
train = a[a$user_id %in% users[1:100],]
test = a[a$user_id %in% users[101:length(users)]]
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
users = sample(unique(a$user_id), 150)
train = a[a$user_id %in% users[1:100],]
test = a[a$user_id %in% users[101:length(users)],]
#######################################
#######################################
length(unique(train$user_id))
length(unique(test$user_id))
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
head(a)
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Make a list of your features here to keep track of them
features = c("correct", "ms_first_response", "hint_count",
"attempt_count", "time_spent",
"rel_resp_time", "slow_response", "fast_response")
m.rf = randomForest(train[, features], as.factor(train$bored), test[, features], as.factor(test$bored), ntree = 100)
m.rf
table(m.rf$predicted, true=train$bored)
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Make a list of your features here to keep track of them
features = c("correct", "ms_first_response", "hint_count",
"attempt_count", "time_spent",
"rel_resp_time", "slow_response", "fast_response")
m.rf = randomForest(train[, features], as.factor(train$bored), test[, features], as.factor(test$bored), ntree = 100, importance = TRUE)
m.rf
table(m.rf$predicted, true=train$bored)
#######################################
#######################################
importance(m.rf)
importance(m.rf) %>%
arrange(desc(MeanDecreaseGini))
importance(m.rf) %>%
data.frame(.) %>%
arrange(desc(MeanDecreaseGini))
importance(m.rf) %>%
mutate(x = rownames(.)) %>%
data.frame(.) %>%
arrange(desc(MeanDecreaseGini))
%>%
importance(m.rf)
rownames(importance(m.rf))
#######################################
####### BEGIN INPUT: Question 4 #######
#######################################
# Compute variable importance
Imp = importance(m.rf)
Rows = rownames(Imp)
Imp %>%
data.frame(.) %>%
mutate(Variable = Rows) %>%
arrange(desc(MeanDecreaseGini))
# Write down your 3 most important variables and why you think they are good predictors
#######################################
#######################################
library(tidyverse)
library(randomForest)
a = readRDS("info5200.10.rds")
head(a)
summary(a)
n_distinct(a$skill_id)
hist(table(a$user_id))
# Add your own exploration and feature engineering here (make at least 7 new features)
head(a)
# Add your own exploration and feature engineering here (make at least 7 new features)
head(a, 20)
# Add your own exploration and feature engineering here (make at least 7 new features)
head(a, 30)
library(data.table)
a.dt <- as.data.table(a)
#######################################
#######################################
head(a, 30)
a.dt[, Consecutive.Correct := sum(correct), by = .(user_id, rleid(correct))]
a.dt
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
a.dt[, Consecutive.Correct := cumsum(correct), by = .(user_id, rleid(correct))]
a.dt
a.dt[, c('user_id', 'correct', 'Consecutive.Correct')]
a.dt[1001:1500, c('user_id', 'correct', 'Consecutive.Correct')]
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
# Assuming the data is time ordered by user, the number of consecutive questions answered correctly on the first attempt
a.dt[, Consecutive.Correct := cumsum(correct), by = .(user_id, rleid(correct))]
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
users = sample(unique(a.dt$user_id), 150)
train = a.dt[a.dt$user_id %in% users[1:100]]
test = a.dt[a.dt$user_id %in% users[101:length(users)]]
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Make a list of your features here to keep track of them
features = c("correct", "ms_first_response", "hint_count",
"attempt_count", "time_spent",
"rel_resp_time", "slow_response", "fast_response", "Consecutive.Correct")
m.rf = randomForest(train[, features], as.factor(train$bored), test[, features], as.factor(test$bored), ntree = 100, importance = TRUE)
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
users = sample(unique(a.dt$user_id), 150)
train = as.data.frame(a.dt[a.dt$user_id %in% users[1:100]])
test = as.data.frame(a.dt[a.dt$user_id %in% users[101:length(users)]])
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Make a list of your features here to keep track of them
features = c("correct", "ms_first_response", "hint_count",
"attempt_count", "time_spent",
"rel_resp_time", "slow_response", "fast_response", "Consecutive.Correct")
m.rf = randomForest(train[, features], as.factor(train$bored), test[, features], as.factor(test$bored), ntree = 100, importance = TRUE)
m.rf
table(m.rf$predicted, true=train$bored)
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 4 #######
#######################################
# Compute variable importance
Imp = importance(m.rf)
Rows = rownames(Imp)
Imp %>%
data.frame(.) %>%
mutate(Variable = Rows) %>%
arrange(desc(MeanDecreaseGini))
# Write down your 3 most important variables and why you think they are good predictors
#######################################
#######################################
head(a, 30)
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
a.dt[, First.Problem.Help := head(hint_count, 1) > 0, by = .(user_id)]
a.dt
a.dt[, c('user_id', 'hint_count', 'First.Problem.Help')]
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
a.dt[, Consecutive.Correct := cumsum(correct), by = .(user_id, rleid(correct))]
a.dt[, First.Problem.Help := head(hint_count, 1) > 0, by = .(user_id)]
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
# Assuming the data is time ordered by user, the number of consecutive questions answered
# correctly on the first attempt, if help was asked for on the first problem
a.dt[, Consecutive.Correct := cumsum(correct), by = .(user_id, rleid(correct))][,
First.Problem.Help := head(hint_count, 1) > 0, by = .(user_id)]
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
users = sample(unique(a.dt$user_id), 150)
train = as.data.frame(a.dt[a.dt$user_id %in% users[1:100]])
test = as.data.frame(a.dt[a.dt$user_id %in% users[101:length(users)]])
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Make a list of your features here to keep track of them
features = c("correct", "ms_first_response", "hint_count",
"attempt_count", "time_spent",
"rel_resp_time", "slow_response", "fast_response", "Consecutive.Correct",
"First.Problem.Help")
m.rf = randomForest(train[, features], as.factor(train$bored), test[, features], as.factor(test$bored), ntree = 100, importance = TRUE)
m.rf
table(m.rf$predicted, true=train$bored)
#######################################
#######################################
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
# Assuming the data is time ordered by user, the number of consecutive questions answered
# correctly on the first attempt, if help was asked for on the first problem, if help was asked
# for on the last problem
a.dt[, Consecutive.Correct := cumsum(correct), by = .(user_id, rleid(correct))][,
`:=`(First.Problem.Help = head(hint_count, 1) > 0,
Last.Problem.Help = tail(hint_count, 1) > 0) by = .(user_id)]
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
# Assuming the data is time ordered by user, the number of consecutive questions answered
# correctly on the first attempt, if help was asked for on the first problem, if help was asked
# for on the last problem
a.dt[, Consecutive.Correct := cumsum(correct), by = .(user_id, rleid(correct))][,
`:=`(First.Problem.Help = head(hint_count, 1) > 0,
Last.Problem.Help = tail(hint_count, 1) > 0), by = .(user_id)]
a.dt
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
users = sample(unique(a.dt$user_id), 150)
train = as.data.frame(a.dt[a.dt$user_id %in% users[1:100]])
test = as.data.frame(a.dt[a.dt$user_id %in% users[101:length(users)]])
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Make a list of your features here to keep track of them
features = c("correct", "ms_first_response", "hint_count",
"attempt_count", "time_spent",
"rel_resp_time", "slow_response", "fast_response", "Consecutive.Correct",
"First.Problem.Help", "Last.Problem.Help")
m.rf = randomForest(train[, features], as.factor(train$bored), test[, features], as.factor(test$bored), ntree = 100, importance = TRUE)
m.rf
table(m.rf$predicted, true=train$bored)
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 4 #######
#######################################
# Compute variable importance
Imp = importance(m.rf)
Rows = rownames(Imp)
Imp %>%
data.frame(.) %>%
mutate(Variable = Rows) %>%
arrange(desc(MeanDecreaseGini))
# Write down your 3 most important variables and why you think they are good predictors
#######################################
#######################################
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
# Assuming the data is time ordered by user, the number of consecutive questions answered
# correctly on the first attempt, if help was asked for on the first problem, if help was asked
# for on the last problem
a.dt[, Consecutive.Correct := cumsum(correct), by = .(user_id, rleid(correct))][,
`:=`(First.Problem.Help = head(hint_count, 1) > 0,
Last.Problem.Help = tail(hint_count, 1) > 0, Cumulative.Hints = cumsum(hint_count)),
by = .(user_id)]
a.dt
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
users = sample(unique(a.dt$user_id), 150)
train = as.data.frame(a.dt[a.dt$user_id %in% users[1:100]])
test = as.data.frame(a.dt[a.dt$user_id %in% users[101:length(users)]])
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Make a list of your features here to keep track of them
features = c("correct", "ms_first_response", "hint_count",
"attempt_count", "time_spent",
"rel_resp_time", "slow_response", "fast_response", "Consecutive.Correct",
"First.Problem.Help", "Last.Problem.Help", "Cumulative.Hints")
m.rf = randomForest(train[, features], as.factor(train$bored), test[, features], as.factor(test$bored), ntree = 100, importance = TRUE)
m.rf
table(m.rf$predicted, true=train$bored)
#######################################
#######################################
#######################################
####### BEGIN INPUT: Question 4 #######
#######################################
# Compute variable importance
Imp = importance(m.rf)
Rows = rownames(Imp)
Imp %>%
data.frame(.) %>%
mutate(Variable = Rows) %>%
arrange(desc(MeanDecreaseGini))
# Write down your 3 most important variables and why you think they are good predictors
#######################################
#######################################
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
a.dt[, Wrong.Previous.5 := Reduce(`+`, shift(correct, 0:4))]
a.dt
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
a.dt[, Wrong.Previous.5 := Reduce(`+`, shift(1 - correct, 0:4))]
a.dt
# Add your own exploration and feature engineering here (make at least 7 new features)
a.dt <- as.data.table(a)
# Assuming the data is time ordered by user, the number of consecutive questions answered
# correctly on the first attempt, if help was asked for on the first problem, if help was asked
# for on the last problem, number of last 5 first responses that were wrong
a.dt[, Consecutive.Correct := cumsum(correct), by = .(user_id, rleid(correct))][,
`:=`(First.Problem.Help = head(hint_count, 1) > 0,
Last.Problem.Help = tail(hint_count, 1) > 0,
Cumulative.Hints = cumsum(hint_count),
Wrong.Previous.5 = Reduce(`+`, shift(1 - correct, 0:4))), .(user_id)]
a.dt
a.dt[, c('user_id', 'correct', 'Wrong.Previous.5')]

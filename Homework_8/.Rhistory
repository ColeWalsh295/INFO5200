output$inst.info1 = renderInfoBox({
infoBox("Students total",
length(unique(quiz$STUDENT_KEY)),
icon = icon("list"), color = "purple")
})
output$inst.info2 = renderInfoBox({
infoBox("Attendance",
paste0(round(100 * mean(quiz$ATTENDED)), "%"),
icon = icon("list"), color = "yellow")
})
output$inst.plot1 = renderPlot({
hist(quiz$QUIZ_SCORE)
})
output$inst.plot2 = renderPlot({
hist(quiz$AVG_T_CLICKER)
})
#######################################
#######################################
}
#######################################
### This code creates the dashboard ###
#######################################
# Here we set up the Header of the dashboard
dhead = dashboardHeader(title = "Clicker Dashboard")
# Here set up the sidebar which has links to two pages
dside = dashboardSidebar(sidebarMenu(
menuItem("Instructor View", tabName = "instructor", icon = icon("dashboard")),
menuItem("Student View", tabName = "student", icon = icon("dashboard"))
))
# Here we set up the body of the dashboard
dbody = dashboardBody(
tabItems(instructor_tab, student_tab)
)
# Combining header, sidebar, and body
ui = dashboardPage(dhead, dside, dbody)
# Generating a local instance of your dashboard
shinyApp(ui, server)
# Generating a local instance of your dashboard
shinyApp(ui, server)
# Generating a local instance of your dashboard
shinyApp(ui, server)
library(tidyverse)
# install.packages("shiny") # if you need to install it first
library(shiny)
# install.packages("shinydashboard") # if you need to install it first
library(shinydashboard)
library(reshape2)
# This should load 2 datasets: experience (123 by 11); quiz (2423 by 13).
load("info5200.8.rda")
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
# Dataframe of 1 row for each student for each quiz
Student <- quiz %>%
group_by(STUDENT_KEY, QUIZ_NUMBER) %>%
mutate(QUIZ_SCORE = replace_na(QUIZ_SCORE, 0)) %>%
summarize(quiz.score = QUIZ_SCORE[1]) %>%
na.omit()
# Dataframe of average temperature for each session, using only students who completed at
# least one temperature question
Session.Temperature <- quiz %>%
filter(COMPLETED_T_CLICKER > 0) %>%
group_by(SESSION_NUMBER) %>%
summarize(avg.temperature = mean(AVG_T_CLICKER))
# Dataframe of average clicker correctness for each session, using only students who
# completed at least one clicke question
Session.Performance <- quiz %>%
filter(COMPLETED_Q_CLICKER > 0) %>%
group_by(SESSION_NUMBER) %>%
summarize(avg.correct = mean(CORRECT_Q_CLICKER),
clicker.quiz.cor = cor(CORRECT_Q_CLICKER/COMPLETED_Q_CLICKER, QUIZ_SCORE,
use = 'pairwise.complete.obs'))
# Dataframe with average scores for each self-reported skill
Subject.cols <- c("DATABASE_SCORE", "SQL_SCORE", "PROGRAMING_SCORE", "STORED_PROC_SCORE",
"ETL_SCORE", "DATA_VIS_SCORE", "REQUIREMENT_GATHER_SCORE")
Experience <- data.frame(avg.experience = sapply(experience[, Subject.cols],
function(x) mean(x, na.rm = TRUE)))
Experience$Question <- rownames(Experience)
#######################################
#######################################
# Instructor Dashboard Tab
instructor_tab = tabItem(
tabName = "instructor",
h2("Instructor Dashboard"),
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Dynamic infoBoxes
fluidRow(
infoBoxOutput("inst.info1"),
infoBoxOutput("inst.info2")
),
# Any visualization
fluidRow(
box(
title = "How are my students doing on quizzes?",
plotOutput("inst.plot1", height = 250)
),
box(
title = "How do my students feel about sessions?",
plotOutput("inst.plot2", height = 350)
)
),
fluidRow(
box(
title = "What are my students' preparation?",
plotOutput("inst.plot3", height = 250)
),
box(
title = "Are my clicker questions related to the quizzes associated with a
session?",
plotOutput("inst.plot4", height = 250)
)
),
fluidRow(
box(
title = "How difficult are my quizzes?",
plotOutput("inst.plot5", height = 250)
),
box(
selectInput("quiz", "Quiz Number:", choices = sort(unique(quiz$QUIZ_NUMBER)))
)
)
#######################################
#######################################
)
# Student Dashboard
student_tab = tabItem(
tabName = "student",
h2("Student Dashboard"),
#######################################
####### BEGIN INPUT: Question 4 #######
#######################################
# Dynamic infoBoxes
fluidRow(
infoBoxOutput("stud.info1"),
infoBoxOutput("stud.info2")
),
# Any visualization
fluidRow(
box(
title = "How am I doing on quizzes relative to other students?",
plotOutput("stud.plot1", height = 250)
),
box(
title = "How does my background and preparation compare to other students?",
plotOutput("stud.plot2", height = 350)
)
),
fluidRow(
box(
title = "How does my performance on clicker questions compare to other
students?",
plotOutput("stud.plot3", height = 250)
)
)
#######################################
#######################################
)
# Instructor Dashboard Tab
server = function(input, output) {
#######################################
####### BEGIN INPUT: Question 5 #######
#######################################
quiz
#### Student Dashboard ####
output$stud.info1 = renderInfoBox({
infoBox("Attendance",
paste0(round(100 * mean(quiz[quiz$STUDENT_KEY == input$student,
'ATTENDED'])), "%"),
icon = icon("list"), color = "purple")
})
output$stud.info2 = renderInfoBox({
infoBox("Average Quiz Score",
paste0(5 * round(Student %>%
filter(STUDENT_KEY == input$student) %>%
summarize(mean(quiz.score)) %>%
pull()), '%'),
icon = icon("list"), color = "yellow")
})
output$stud.plot1 = renderPlot({
ggplot(Student, aes(x = as.factor(QUIZ_NUMBER), y = quiz.score)) +
geom_boxplot(outlier.shape = NA) +
geom_point(data = Student[Student$STUDENT_KEY == input$student,],
aes(x = as.factor(QUIZ_NUMBER), y = quiz.score, color = 'red', size = 20)) +
theme_classic() +
theme(legend.position = 'none') +
labs(x = 'Quiz Number', y = 'Quiz Score')
})
output$stud.plot2 = renderPlot({
ggplot(melt(experience[, c('STUDENT_KEY', Subject.cols)], id.vars = 'STUDENT_KEY'),
aes(x = variable, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(data = melt(experience[experience$STUDENT_KEY == input$student,
Subject.cols]), aes(x = variable, y = value,
color = 'red', size = 20)) +
theme_classic() +
theme(legend.position = 'none') +
labs(x = 'Subject', y = 'Reported Experience') +
scale_x_discrete(labels = c('Database', 'SQL', 'Programming', 'Stored Procedure',
'ETL', 'Data Visuals', 'Requirement Gathering'))
})
output$stud.plot3 = renderPlot({
ggplot(quiz, aes(x = as.factor(SESSION_NUMBER), y = CORRECT_Q_CLICKER)) +
geom_boxplot() +
geom_point(data = quiz[quiz$STUDENT_KEY == input$student,],
aes(x = SESSION_NUMBER, y = CORRECT_Q_CLICKER, color = 'red', size = 20)) +
theme_classic() +
theme(legend.position = 'none') +
labs(x = 'Session Number', y = 'Number of clicker questions correct')
})
#### Instructor Dashboard ####
output$inst.info1 = renderInfoBox({
infoBox("Students total",
length(unique(quiz$STUDENT_KEY)),
icon = icon("list"), color = "purple")
})
output$inst.info2 = renderInfoBox({
infoBox("Attendance",
paste0(round(100 * mean(quiz$ATTENDED)), "%"),
icon = icon("list"), color = "yellow")
})
output$inst.plot1 = renderPlot({
ggplot(Student %>%
group_by(STUDENT_KEY) %>%
summarize(avg.quiz.score = mean(quiz.score)), aes(x = avg.quiz.score)) +
geom_histogram() +
theme_classic() +
labs(x = 'Average Quiz Score', y = 'Number of Students')
})
output$inst.plot2 = renderPlot({
ggplot(Session.Temperature, aes(x = reorder(SESSION_NUMBER, avg.temperature),
y = avg.temperature)) +
geom_point() +
coord_flip() +
theme_classic() +
labs(x = 'Session', y = 'Average Temperature Score')
})
output$inst.plot3 = renderPlot({
ggplot(Experience, aes(x = Question, y = avg.experience)) +
geom_point() +
theme_classic() +
labs(x = 'Subject', y = 'Average Reported Experience') +
scale_x_discrete(labels = c('Database', 'SQL', 'Programming', 'Stored Procedure',
'ETL', 'Data Visuals', 'Requirement Gathering'))
})
output$inst.plot4 = renderPlot({
ggplot(Session.Performance, aes(x = reorder(SESSION_NUMBER, clicker.quiz.cor),
y = clicker.quiz.cor)) +
geom_point() +
coord_flip() +
theme_classic() +
labs(x = 'Session', y = 'Correlation of Average Clicker Score with Quiz Score')
})
output$inst.plot5 <- renderPlot({
ggplot(Student[Student$QUIZ_NUMBER == input$quiz,], aes(x = quiz.score)) +
geom_histogram() +
theme_classic() +
labs(x = paste('Score on Quiz ', input$quiz), y = 'Number of Students')
})
#######################################
#######################################
}
library(tidyverse)
# install.packages("shiny") # if you need to install it first
library(shiny)
# install.packages("shinydashboard") # if you need to install it first
library(shinydashboard)
library(reshape2)
# This should load 2 datasets: experience (123 by 11); quiz (2423 by 13).
load("info5200.8.rda")
library(tidyverse)
# install.packages("shiny") # if you need to install it first
library(shiny)
# install.packages("shinydashboard") # if you need to install it first
library(shinydashboard)
library(reshape2)
# This should load 2 datasets: experience (123 by 11); quiz (2423 by 13).
load("info5200.8.rda")
#######################################
####### BEGIN INPUT: Question 2 #######
#######################################
# Dataframe of 1 row for each student for each quiz
Student <- quiz %>%
group_by(STUDENT_KEY, QUIZ_NUMBER) %>%
mutate(QUIZ_SCORE = replace_na(QUIZ_SCORE, 0)) %>%
summarize(quiz.score = QUIZ_SCORE[1]) %>%
na.omit()
# Dataframe of average temperature for each session, using only students who completed at
# least one temperature question
Session.Temperature <- quiz %>%
filter(COMPLETED_T_CLICKER > 0) %>%
group_by(SESSION_NUMBER) %>%
summarize(avg.temperature = mean(AVG_T_CLICKER))
# Dataframe of average clicker correctness for each session, using only students who
# completed at least one clicke question
Session.Performance <- quiz %>%
filter(COMPLETED_Q_CLICKER > 0) %>%
group_by(SESSION_NUMBER) %>%
summarize(avg.correct = mean(CORRECT_Q_CLICKER),
clicker.quiz.cor = cor(CORRECT_Q_CLICKER/COMPLETED_Q_CLICKER, QUIZ_SCORE,
use = 'pairwise.complete.obs'))
# Dataframe with average scores for each self-reported skill
Subject.cols <- c("DATABASE_SCORE", "SQL_SCORE", "PROGRAMING_SCORE", "STORED_PROC_SCORE",
"ETL_SCORE", "DATA_VIS_SCORE", "REQUIREMENT_GATHER_SCORE")
Experience <- data.frame(avg.experience = sapply(experience[, Subject.cols],
function(x) mean(x, na.rm = TRUE)))
Experience$Question <- rownames(Experience)
#######################################
#######################################
# Instructor Dashboard Tab
instructor_tab = tabItem(
tabName = "instructor",
h2("Instructor Dashboard"),
#######################################
####### BEGIN INPUT: Question 3 #######
#######################################
# Dynamic infoBoxes
fluidRow(
infoBoxOutput("inst.info1"),
infoBoxOutput("inst.info2")
),
# Any visualization
fluidRow(
box(
title = "How are my students doing on quizzes?",
plotOutput("inst.plot1", height = 250)
),
box(
title = "How do my students feel about sessions?",
plotOutput("inst.plot2", height = 350)
)
),
fluidRow(
box(
title = "What are my students' preparation?",
plotOutput("inst.plot3", height = 250)
),
box(
title = "Are my clicker questions related to the quizzes associated with a
session?",
plotOutput("inst.plot4", height = 250)
)
),
fluidRow(
box(
title = "How difficult are my quizzes?",
plotOutput("inst.plot5", height = 250)
),
box(
selectInput("quiz", "Quiz Number:", choices = sort(unique(quiz$QUIZ_NUMBER)))
)
)
#######################################
#######################################
)
# Student Dashboard
student_tab = tabItem(
tabName = "student",
h2("Student Dashboard"),
#######################################
####### BEGIN INPUT: Question 4 #######
#######################################
# Dynamic infoBoxes
fluidRow(
infoBoxOutput("stud.info1"),
infoBoxOutput("stud.info2")
),
# Any visualization
fluidRow(
box(
title = "How am I doing on quizzes relative to other students?",
plotOutput("stud.plot1", height = 250)
),
box(
title = "How does my background and preparation compare to other students?",
plotOutput("stud.plot2", height = 350)
)
),
fluidRow(
box(
title = "How does my performance on clicker questions compare to other
students?",
plotOutput("stud.plot3", height = 250)
)
)
#######################################
#######################################
)
# Instructor Dashboard Tab
server = function(input, output) {
#######################################
####### BEGIN INPUT: Question 5 #######
#######################################
quiz
#### Student Dashboard ####
output$stud.info1 = renderInfoBox({
infoBox("Attendance",
paste0(round(100 * mean(quiz[quiz$STUDENT_KEY == input$student,
'ATTENDED'])), "%"),
icon = icon("list"), color = "purple")
})
output$stud.info2 = renderInfoBox({
infoBox("Average Quiz Score",
paste0(5 * round(Student %>%
filter(STUDENT_KEY == input$student) %>%
summarize(mean(quiz.score)) %>%
pull()), '%'),
icon = icon("list"), color = "yellow")
})
output$stud.plot1 = renderPlot({
ggplot(Student, aes(x = as.factor(QUIZ_NUMBER), y = quiz.score)) +
geom_boxplot(outlier.shape = NA) +
geom_point(data = Student[Student$STUDENT_KEY == input$student,],
aes(x = as.factor(QUIZ_NUMBER), y = quiz.score, color = 'red', size = 20)) +
theme_classic() +
theme(legend.position = 'none') +
labs(x = 'Quiz Number', y = 'Quiz Score')
})
output$stud.plot2 = renderPlot({
ggplot(melt(experience[, c('STUDENT_KEY', Subject.cols)], id.vars = 'STUDENT_KEY'),
aes(x = variable, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(data = melt(experience[experience$STUDENT_KEY == input$student,
Subject.cols]), aes(x = variable, y = value,
color = 'red', size = 20)) +
theme_classic() +
theme(legend.position = 'none') +
labs(x = 'Subject', y = 'Reported Experience') +
scale_x_discrete(labels = c('Database', 'SQL', 'Programming', 'Stored Procedure',
'ETL', 'Data Visuals', 'Requirement Gathering'))
})
output$stud.plot3 = renderPlot({
ggplot(quiz, aes(x = as.factor(SESSION_NUMBER), y = CORRECT_Q_CLICKER)) +
geom_boxplot() +
geom_point(data = quiz[quiz$STUDENT_KEY == input$student,],
aes(x = SESSION_NUMBER, y = CORRECT_Q_CLICKER, color = 'red', size = 20)) +
theme_classic() +
theme(legend.position = 'none') +
labs(x = 'Session Number', y = 'Number of clicker questions correct')
})
#### Instructor Dashboard ####
output$inst.info1 = renderInfoBox({
infoBox("Students total",
length(unique(quiz$STUDENT_KEY)),
icon = icon("list"), color = "purple")
})
output$inst.info2 = renderInfoBox({
infoBox("Attendance",
paste0(round(100 * mean(quiz$ATTENDED)), "%"),
icon = icon("list"), color = "yellow")
})
output$inst.plot1 = renderPlot({
ggplot(Student %>%
group_by(STUDENT_KEY) %>%
summarize(avg.quiz.score = mean(quiz.score)), aes(x = avg.quiz.score)) +
geom_histogram() +
theme_classic() +
labs(x = 'Average Quiz Score', y = 'Number of Students')
})
output$inst.plot2 = renderPlot({
ggplot(Session.Temperature, aes(x = reorder(SESSION_NUMBER, avg.temperature),
y = avg.temperature)) +
geom_point() +
coord_flip() +
theme_classic() +
labs(x = 'Session', y = 'Average Temperature Score')
})
output$inst.plot3 = renderPlot({
ggplot(Experience, aes(x = Question, y = avg.experience)) +
geom_point() +
theme_classic() +
labs(x = 'Subject', y = 'Average Reported Experience') +
scale_x_discrete(labels = c('Database', 'SQL', 'Programming', 'Stored Procedure',
'ETL', 'Data Visuals', 'Requirement Gathering'))
})
output$inst.plot4 = renderPlot({
ggplot(Session.Performance, aes(x = reorder(SESSION_NUMBER, clicker.quiz.cor),
y = clicker.quiz.cor)) +
geom_point() +
coord_flip() +
theme_classic() +
labs(x = 'Session', y = 'Correlation of Average Clicker Score with Quiz Score')
})
output$inst.plot5 <- renderPlot({
ggplot(Student[Student$QUIZ_NUMBER == input$quiz,], aes(x = quiz.score)) +
geom_histogram() +
theme_classic() +
labs(x = paste('Score on Quiz ', input$quiz), y = 'Number of Students')
})
#######################################
#######################################
}
#######################################
### This code creates the dashboard ###
#######################################
# Here we set up the Header of the dashboard
dhead = dashboardHeader(title = "Clicker Dashboard")
# Here set up the sidebar which has links to two pages
dside = dashboardSidebar(sidebarMenu(
menuItem("Instructor View", tabName = "instructor", icon = icon("dashboard")),
menuItem("Student View", tabName = "student", icon = icon("dashboard")),
selectInput("student", "Student ID:", choices = sort(unique(quiz$STUDENT_KEY)))
))
# Here we set up the body of the dashboard
dbody = dashboardBody(
tabItems(instructor_tab, student_tab)
)
# Combining header, sidebar, and body
ui = dashboardPage(dhead, dside, dbody)
# Generating a local instance of your dashboard
shinyApp(ui, server)
